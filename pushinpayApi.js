const axios = require('axios');

const PUSHINPAY_TOKEN = '36250|MPvURHE0gE6lqsPN0PtwDOUVISoLjSyvqYUvuDPi47f09b29';
const API_BASE = 'https://api.pushinpay.com.br';

async function pushinpayGet(endpoint, config = {}) {
  return axios.get(`${API_BASE}${endpoint}`, {
    ...config,
    headers: {
      'Authorization': `Bearer ${PUSHINPAY_TOKEN}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      ...(config.headers || {})
    }
  });
}

async function pushinpayPost(endpoint, data, config = {}) {
  return axios.post(`${API_BASE}${endpoint}`, data, {
    ...config,
    headers: {
      'Authorization': `Bearer ${PUSHINPAY_TOKEN}`,
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      ...(config.headers || {})
    }
  });
}

// Fun√ß√£o para criar um pagamento PIX
async function createPixPayment(paymentData) {
  try {
    // Validar valor m√≠nimo (50 centavos)
    const valueInCents = Math.round(paymentData.amount * 100);
    if (valueInCents < 50) {
      throw new Error('Valor m√≠nimo √© de 50 centavos (R$ 0,50)');
    }

    // Estrutura de dados conforme documenta√ß√£o oficial da PushinPay
    const requestData = {
      value: valueInCents,  // Valor em centavos
      webhook_url: paymentData.webhook_url || undefined,  // Opcional
      split_rules: paymentData.split_rules || []  // Array para divis√£o
    };

    // Remover campos undefined para n√£o enviar na requisi√ß√£o
    Object.keys(requestData).forEach(key => 
      requestData[key] === undefined && delete requestData[key]
    );

    console.log('üì§ Enviando dados para PushinPay:', requestData);

    // Endpoint correto conforme documenta√ß√£o: POST /api/pix/cashIn
    const response = await pushinpayPost('/api/pix/cashIn', requestData);
    
    console.log('üì• Resposta da PushinPay:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao criar pagamento PIX PushinPay:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para consultar status do pagamento
async function getPaymentStatus(paymentId) {
  try {
    console.log('üîç Consultando status do pagamento:', paymentId);
    
    // Endpoint correto conforme documenta√ß√£o: GET /api/transactions/{ID}
    const response = await pushinpayGet(`/api/transactions/${paymentId}`);
    
    console.log('üì• Status recebido da PushinPay:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao consultar status do pagamento PushinPay:', error.response?.data || error.message);
    
    // Se retornar 404, a documenta√ß√£o menciona que retorna null
    if (error.response?.status === 404) {
      return null;
    }
    
    throw error;
  }
}

// Fun√ß√£o para listar pagamentos
// NOTA: A documenta√ß√£o da PushinPay n√£o fornece endpoint para listar pagamentos
// Esta funcionalidade pode n√£o estar dispon√≠vel na API atual
async function listPayments(filters = {}) {
  try {
    console.warn('‚ö†Ô∏è Endpoint de listagem n√£o documentado na PushinPay');
    throw new Error('Funcionalidade de listagem de pagamentos n√£o dispon√≠vel na API PushinPay');
    
    // C√≥digo comentado - endpoint n√£o existe na documenta√ß√£o oficial
    /*
    const queryParams = new URLSearchParams(filters).toString();
    const response = await pushinpayGet(`/api/payments?${queryParams}`);
    return response.data;
    */
  } catch (error) {
    console.error('‚ùå Erro ao listar pagamentos PushinPay:', error.response?.data || error.message);
    throw error;
  }
}

module.exports = { 
  pushinpayGet, 
  pushinpayPost, 
  createPixPayment, 
  getPaymentStatus, 
  listPayments 
};